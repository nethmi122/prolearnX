{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\PAF Project\\\\prolearnX\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create the Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n\n// Provider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // For demo purposes, let's simulate a logged-in user\n  // In a real app, you would check localStorage/sessionStorage or make an API call\n  useEffect(() => {\n    // Mock user data - replace with actual authentication logic\n    const mockUser = {\n      username: 'testuser',\n      displayName: 'Test User',\n      profilePicture: null\n    };\n    setCurrentUser(mockUser);\n    setLoading(false);\n  }, []);\n\n  // Function to handle login (mock implementation)\n  const login = async (username, password) => {\n    // This would be an API call in a real app\n    if (username && password) {\n      const user = {\n        username: username,\n        displayName: username,\n        // You might get this from API\n        profilePicture: null\n      };\n      setCurrentUser(user);\n      return user;\n    }\n    throw new Error('Invalid credentials');\n  };\n\n  // Function to handle logout\n  const logout = () => {\n    setCurrentUser(null);\n  };\n\n  // Auth context value\n  const value = {\n    currentUser,\n    login,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","mockUser","username","displayName","profilePicture","login","password","user","Error","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Projects/PAF Project/prolearnX/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create the Auth Context\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use the auth context\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\n// Provider component\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // For demo purposes, let's simulate a logged-in user\r\n  // In a real app, you would check localStorage/sessionStorage or make an API call\r\n  useEffect(() => {\r\n    // Mock user data - replace with actual authentication logic\r\n    const mockUser = {\r\n      username: 'testuser',\r\n      displayName: 'Test User',\r\n      profilePicture: null\r\n    };\r\n    \r\n    setCurrentUser(mockUser);\r\n    setLoading(false);\r\n  }, []);\r\n  \r\n  // Function to handle login (mock implementation)\r\n  const login = async (username, password) => {\r\n    // This would be an API call in a real app\r\n    if (username && password) {\r\n      const user = {\r\n        username: username,\r\n        displayName: username, // You might get this from API\r\n        profilePicture: null\r\n      };\r\n      setCurrentUser(user);\r\n      return user;\r\n    }\r\n    throw new Error('Invalid credentials');\r\n  };\r\n  \r\n  // Function to handle logout\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n  };\r\n  \r\n  // Auth context value\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!currentUser\r\n  };\r\n  \r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,SAASO,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,OAAOP,UAAU,CAACK,WAAW,CAAC;AAChC;;AAEA;AAAAE,EAAA,CAJgBD,OAAO;AAKvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,QAAQ,GAAG;MACfC,QAAQ,EAAE,UAAU;MACpBC,WAAW,EAAE,WAAW;MACxBC,cAAc,EAAE;IAClB,CAAC;IAEDN,cAAc,CAACG,QAAQ,CAAC;IACxBD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,KAAK,GAAG,MAAAA,CAAOH,QAAQ,EAAEI,QAAQ,KAAK;IAC1C;IACA,IAAIJ,QAAQ,IAAII,QAAQ,EAAE;MACxB,MAAMC,IAAI,GAAG;QACXL,QAAQ,EAAEA,QAAQ;QAClBC,WAAW,EAAED,QAAQ;QAAE;QACvBE,cAAc,EAAE;MAClB,CAAC;MACDN,cAAc,CAACS,IAAI,CAAC;MACpB,OAAOA,IAAI;IACb;IACA,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACxC,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBX,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;;EAED;EACA,MAAMY,KAAK,GAAG;IACZb,WAAW;IACXQ,KAAK;IACLI,MAAM;IACNE,eAAe,EAAE,CAAC,CAACd;EACrB,CAAC;EAED,oBACEP,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAf,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B;AAACpB,GAAA,CAnDeF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}